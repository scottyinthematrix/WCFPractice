//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScottyApps.WCFPractice.CalcService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Complex", Namespace="http://schemas.datacontract.org/2004/07/ScottyApps.WCFPractice.CalcService")]
    public partial class Complex : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double ImaginaryField;
        
        private double RealField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Imaginary
        {
            get
            {
                return this.ImaginaryField;
            }
            set
            {
                this.ImaginaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Real
        {
            get
            {
                return this.RealField;
            }
            set
            {
                this.RealField = value;
            }
        }

        public override string ToString()
        {
            return string.Format("{0} + i{1}", Real, Imaginary);
        }

    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ICalcService")]
public interface ICalcService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Add", ReplyAction="http://tempuri.org/ICalcService/AddResponse")]
    AddResponse Add(AddRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Add", ReplyAction="http://tempuri.org/ICalcService/AddResponse")]
    System.Threading.Tasks.Task<AddResponse> AddAsync(AddRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Subtract", ReplyAction="http://tempuri.org/ICalcService/SubtractResponse")]
    ScottyApps.WCFPractice.CalcService.Complex Subtract(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Subtract", ReplyAction="http://tempuri.org/ICalcService/SubtractResponse")]
    System.Threading.Tasks.Task<ScottyApps.WCFPractice.CalcService.Complex> SubtractAsync(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Multiply", ReplyAction="http://tempuri.org/ICalcService/MultiplyResponse")]
    ScottyApps.WCFPractice.CalcService.Complex Multiply(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Multiply", ReplyAction="http://tempuri.org/ICalcService/MultiplyResponse")]
    System.Threading.Tasks.Task<ScottyApps.WCFPractice.CalcService.Complex> MultiplyAsync(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Devide", ReplyAction="http://tempuri.org/ICalcService/DevideResponse")]
    ScottyApps.WCFPractice.CalcService.Complex Devide(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Devide", ReplyAction="http://tempuri.org/ICalcService/DevideResponse")]
    System.Threading.Tasks.Task<ScottyApps.WCFPractice.CalcService.Complex> DevideAsync(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="Add", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class AddRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public ScottyApps.WCFPractice.CalcService.Complex x;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
    public ScottyApps.WCFPractice.CalcService.Complex y;
    
    public AddRequest()
    {
    }
    
    public AddRequest(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        this.x = x;
        this.y = y;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="AddResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class AddResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public string AddResult;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
    public ScottyApps.WCFPractice.CalcService.Complex x;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
    public ScottyApps.WCFPractice.CalcService.Complex y;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
    public ScottyApps.WCFPractice.CalcService.Complex rsl;
    
    public AddResponse()
    {
    }
    
    public AddResponse(string AddResult, ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y, ScottyApps.WCFPractice.CalcService.Complex rsl)
    {
        this.AddResult = AddResult;
        this.x = x;
        this.y = y;
        this.rsl = rsl;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICalcServiceChannel : ICalcService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CalcServiceClient : System.ServiceModel.ClientBase<ICalcService>, ICalcService
{
    
    public CalcServiceClient()
    {
    }
    
    public CalcServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CalcServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CalcServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CalcServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    AddResponse ICalcService.Add(AddRequest request)
    {
        return base.Channel.Add(request);
    }
    
    public string Add(ref ScottyApps.WCFPractice.CalcService.Complex x, ref ScottyApps.WCFPractice.CalcService.Complex y, out ScottyApps.WCFPractice.CalcService.Complex rsl)
    {
        AddRequest inValue = new AddRequest();
        inValue.x = x;
        inValue.y = y;
        AddResponse retVal = ((ICalcService)(this)).Add(inValue);
        x = retVal.x;
        y = retVal.y;
        rsl = retVal.rsl;
        return retVal.AddResult;
    }
    
    public System.Threading.Tasks.Task<AddResponse> AddAsync(AddRequest request)
    {
        return base.Channel.AddAsync(request);
    }
    
    public ScottyApps.WCFPractice.CalcService.Complex Subtract(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        return base.Channel.Subtract(x, y);
    }
    
    public System.Threading.Tasks.Task<ScottyApps.WCFPractice.CalcService.Complex> SubtractAsync(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        return base.Channel.SubtractAsync(x, y);
    }
    
    public ScottyApps.WCFPractice.CalcService.Complex Multiply(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        return base.Channel.Multiply(x, y);
    }
    
    public System.Threading.Tasks.Task<ScottyApps.WCFPractice.CalcService.Complex> MultiplyAsync(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        return base.Channel.MultiplyAsync(x, y);
    }
    
    public ScottyApps.WCFPractice.CalcService.Complex Devide(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        return base.Channel.Devide(x, y);
    }
    
    public System.Threading.Tasks.Task<ScottyApps.WCFPractice.CalcService.Complex> DevideAsync(ScottyApps.WCFPractice.CalcService.Complex x, ScottyApps.WCFPractice.CalcService.Complex y)
    {
        return base.Channel.DevideAsync(x, y);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IEcho", CallbackContract=typeof(IEchoCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IEcho
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEcho/Echo", ReplyAction="http://tempuri.org/IEcho/EchoResponse")]
    string Echo(string msg);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEcho/Echo", ReplyAction="http://tempuri.org/IEcho/EchoResponse")]
    System.Threading.Tasks.Task<string> EchoAsync(string msg);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEcho/SayHello")]
    void SayHello(string name);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEcho/SayHello")]
    System.Threading.Tasks.Task SayHelloAsync(string name);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IEchoCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEcho/PrintResult")]
    void PrintResult(string s);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IEchoChannel : IEcho, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class EchoClient : System.ServiceModel.DuplexClientBase<IEcho>, IEcho
{
    
    public EchoClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public EchoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public EchoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public EchoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public EchoClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public string Echo(string msg)
    {
        return base.Channel.Echo(msg);
    }
    
    public System.Threading.Tasks.Task<string> EchoAsync(string msg)
    {
        return base.Channel.EchoAsync(msg);
    }
    
    public void SayHello(string name)
    {
        base.Channel.SayHello(name);
    }
    
    public System.Threading.Tasks.Task SayHelloAsync(string name)
    {
        return base.Channel.SayHelloAsync(name);
    }
}
